[{"content":"关系数据模型（Inmon） 构建流程 ￼\n结构 表 列 行 关系 属性 元组 实体 字段 记录 超键：多列的联合标识表里行记录的唯一性 候选键：超键子集，某一列已可以确定表行记录的唯一性。 学号和姓名构成一个超键，如果学号本身可以保证唯一性，那学号就是一个候选键\n三范式3NF 3NF层层依赖，满足1NF才能满足2NF，满足2NF才能满足3NF\n1NF：表中行记录不可拆分 2NF：表中非候选键必须依赖整个候选键集合，不能存在部分依赖 3NF：表中非候选键不存在相互依赖\n如果某张表是不符合3NF的，如何变成3NF？ 把这张表拆成多张\n维度数据模型（Kimball） 组成元素 事实：度量，值。如金额 维度：事实的属性。如谁什么时间在哪买的\n维度模型按业务流程领域即主题域的建立，不同的主题域可能共享某些维度（共用1张维度表），为了提高数据操作的性能和数据一致性，需要使用一致性维度（具有相同属性和内容的维度 ）\n事实表 事务事实表：事件的记录，每发生1次事件，表中就会插入1条记录。如下单记录、付款记录。 周期快照事实表：周期性的记录事情的事实或或历史状况的平均。如月末余额，本月销量。 累积快照事实表：统计流程节点运转效率，这种表有多个流程的关键时间。如订单表的下单时间、支付时间、发货时间。 维度表 事实的属性\n时间维度表：互联网一般不咋用。金融会用，如账期、财年。 地理维度表 产品维度表 人员维度表 范围维度表：什么样的区间定义成低中高 代理键：维度表中设计一个单列。维度表本身生成的一个主键，用来映射业务的主键。实际用的较少。\n构建流程 ￼\n选择业务过程，确定事实表类型 声明粒度：业务最小的活动单元或不同维度的组合。 确认维度 确认事实（周期快照事实表中的全量型事实表快照、累积快照事实表可能没有这一步） 举个例子 【业务过程】:下订单 【粒度】:每笔订单(拆分为单个物品) 【维度】:用户、商品、卖家、地域、渠道类型等(可供分析的角度) 【事实/度量】:订单金额等(可用于分析的数据)\n【业务过程】:下订单 【粒度】:每笔订单(拆分为单个物品) 【维度】:用户、商品、卖家、地域、渠道类型等(可供分析的角度) 【事实/度量】:订单金额等(可用于分析的数据)\n维度规范化 消除冗余，变得符合3NF的过程。维度数据模型（Kimball）更倾向于非规范化。\n不做维度规范化原因：\n规范化会增加表的数量，代码更加复杂 查询性能，Join会走Shuffle，热点键存在会增加单个Reduce压力。 问题：什么时候不做维度规范化？\n多个维度共用某些通用属性时。如：省市区不做单独维表，而是和地区一起放在一个维表里。 多个维表较小组成1个为表较小时，可以使用Mapjoin。 常见模型 星型模型 有1个或多个事实表构成，每个事实表关联1层多个维表。维表不是规范化的，因为只有1层，尽量冗余多的信息，满足分析的需要。 星型模型新增维度调整范围较大，灵活性不足。 ￼￼\n雪花模型 对星型模型为表规范化处理，把冗余信息新建维表，形成雪花形状。Kimball逐渐变Inmon。 ￼￼\n星座模型 多个星型模型的事实表共用维表自然形成了星座模型。企业中最常用。 ￼￼\nData Vault模型 组成 中心表Hub：记录业务主键 链接表Link：记录业务关系 附属表Sat：记录业务描述。也叫卫星表 Data Vault不区分数据在业务层面上正确与错误，它保留操作型系统的所有时间的所有数据，装载数据时不做数据验证、清洗等工作。符合数据湖理念。\n缺点 看起来灵活，业务复杂且数据量大时，会产生很多卫星表，卫星表相当于Kimball的事实表，下游使用卫星表时，卫星表关联时属于大表关联大表，可能会产生瓶颈，且对集群计算能力的要求比较高。\n","date":"2023-11-21T00:00:00+08:00","image":"/post_imgs/3.jpg","permalink":"/p/basic-design/","title":"数仓设计基础"},{"content":"数据分层结构 问题1:为什么要进行数据分层？ 清晰数据结构，方便在出问题时进行血缘追踪 减少重复开发：开发一些通用的中间层数据 复杂问题简单化：复杂问题分解成多个步骤，每一层只处理单一步骤。修复问题从有问题的步骤修复 屏蔽原始数据的异常：不用改一次业务就重新接入数据（数据同步时有字段映射，原始数据改了加字段就可以） 空间换时间，对数据进行预处理 问题2:数仓可以没有DWS层吗？ 可以，在公司业务流程成熟之前，看数场景和指标体系不固定，可以只建到DWD层。架构这个东西，存在即是合理，只要合理的考虑层次的用途。\n离线架构 数仓架构类型 Inmon，三范式消除冗余。各个业务部门自己建立各个数据集市，数据集市中落物理表，报表从数据集市出 ￼\nKimball，数仓高粒度，使用灵活。由星型模式的维度表和事实表组成，数据集市是逻辑概念，不落物理表，可以选择建视图，或者干脆直接取数，因为数仓信息足够支持直接取数 ￼\n混合数仓，由Inmon三范式数仓建立Kimball数仓，可以同时继承Inmon和Kimball优点：既可以消除冗余，又能提供多维度 ￼\n结合工作经历 HangY使用Inmon，完全和这个一模一样 ￼ FenT使用Inmon Kimball的星型模型和事实表 ￼ 离线建模 Inmon设计思路：自上而下，业务稳定，依靠经验 看上游能给我们提供什么数据 依靠经验把数据转化成表需求 ETL后，把数据放入3范式数据仓库 从3范式数据仓库里取数，简单组合后形成数据各部门集市 各数据集市给BI系统供数 Kimball设计思路：自下而上，业务不稳定，建议不要一上来就搞大工程，先实现小目标，慢慢积累成数据仓库 从下游业务数据分析需求出发，了解待解决问题的业务流程、维度、指标 去上游业务系统数据源捞需要的数据（上游可能没有，得让他们提供） 捞取的数据根据下游分析的目标，转变成维度表、事实表需求，为了方便分析，会做维度退化 根据分析的领域不同，逐渐积累出一堆数据集市 数据集市的集合在逻辑上的概念就是数据仓库 由于ADS和DWS分界线不明，阿里新搞了一个MDS。 ￼\n实时架构 Lambda：在数据源和数仓之间新增一个消息队列（对数据源进行流式改造，即把数据发送到消息队列），实时计算消费消息队列，数据服务层完成离线和实时的合并。保存了T+1数据，实时计算重跑时比较友好。 ￼ Kappa：去掉Lambda离线部分。 缺点： 消息中间件缓存的数据量和回溯数据有性能瓶颈。 不同的实时流关联时，因为顺序问题而误抛。 HSAP：Hybrid serving and analytical processing(服务分析一体化) 。本质也是Lambda，对实时和离线二次开发，统一封装。阿里云Hologres ￼ ","date":"2023-09-10T00:00:00+08:00","image":"/post_imgs/2.jpg","permalink":"/p/dw-arch/","title":"数仓架构"},{"content":"数仓特点 面向主题 建立数仓之前，必须先明确主题域。比如我要分析某段时间某个产品的用户特征，我去销售域的仓库里找数据就可以。\n集成性 这里有2点，第2点是我一直忽视的。\n从各个系统里拿数据放到一起。 把数据处理成码值统一、单位统一的符合标准的数据。 相对稳定 存储稳定，很少修改和删除，一般都是重跑。\n反应历史变化 根据数据的价值、重跑成本，不同的表有不同的存储策略和生命周期 数据存的比较久，京东淘宝几年前的订单都有。\n为什么需要数据仓库？ 需要分析的数据量较大(单批 GiB)，此时事务性数据库分析性能堪忧\n需要通过建立索引而且会分析查询会影响在线事务。而数仓一般采用列式存储，自带索引性能加成。\n分析查询不想影响在线事务\n需要记录历史数据\n需要对来自不同数据库、数据源的数据进行整合、关联分析和交叉探查。比如将存储在 SLS 的用户日志和 MySQL 的用户信息进行关联分析，通过用户的行为日志建立用户画像。\n批处理分析，需要定期批量查询分析数据并生成结果，比如各种 BI 报表。\n数据库与数据仓库数据模型的区别 数据仓库和数据中台的什么区别 数据仓库的主要场景是支持管理决策和业务分析，而数据中台则是将数据服务化之后提供给业务系统，目标是将数据能力渗透到各个业务环节，不限于决策分析类场景。\n数据湖 数据湖是如何出现，应对场景是什么 出现了各种不同类型的数据，如音频，视频等非结构化的数据。人们意识到数据包含巨大的潜在价值，对于很多数据，即使暂时没有明确的需求，也想先留一份。 所以，妥协的办法出现了，从先处理后用，变成了先存储，以后用的时候再考虑怎么处理。这就是数据湖的处理方式。\n数据仓库和数据湖的差异 湖仓一体，目前作为前沿的大数据架构，数据湖和数据仓库一体正蓬勃发展，有望成为新一代的大数据应用架构。\n数据模型 数据模型：表现和抽象实体和实体间的关系 数据模型=数据组件（业务对象（如用户、商家）、指标、表等）+组件间关系+组件间规约\n金字塔模型，尖是概念模型，底是物理模型\n概念模型：确认要分析的业务过程 逻辑模型：确认粒度、维度 物理模型：真正要落表了 为什么要建设数据模型 能全面了解该单位的业务架构图和整个业务的运行情况；改进业务流程。\n消灭信息孤岛和数据差异。\n上层业务变化不必牵一发而动全身。\n建模过程中的何种手段可以有这样的好处？后面学建模的时候得思考。目前的理解是可以把变化的业务搞成确认的粒度、维度，数仓分层。解决业务的变动和数据仓库的灵活性。通过数据模型的建设，能够很好的分离出底层技术的实现和上层业务的展现。当上层业务发生变化时，通过数据模型，底层的技术实现可以非常轻松的完成业务的变动，从而达到整个数据仓库系统的灵活性。\n是建设数仓的前期阶段，帮助数仓本身的建设。 建模简化过程 概念和逻辑阶段：选择业务过程，声明粒度，确认维度，定义维度属性，确认事实，确认冗余。参考业务系统开发的业务流程，看看概念和逻辑模型最后能不能输出核心的业务流程图。\n物理模型阶段：实体一般建维度表（如用户、商品等），业务过程一般用事实表\n","date":"2023-09-01T00:00:00+08:00","image":"/post_imgs/1.jpg","permalink":"/p/basic-concepts/","title":"数仓概念"}]